  
    <% # Include TinyMCE before other JavaScript includes to avoid problems -%>
    <!-- javascript_include_tiny_mce_if_used -->
	<%= include_tiny_mce_js_if_needed %>
	
	
	
	<% # Change content_css when layout is altered -%>
	<% @tiny_mce_options[:content_css] = '/stylesheets/' + session[:layout].to_s.sub(/\/.*$/, "") + '/screen.css' if session[:layout] != nil %>
	
    <!-- tiny_mce if using_tiny_mce? -->
	<%= tiny_mce_init_if_needed %>
	
	
    <script language="javascript" type="text/javascript">
    	
    function tinyCleanup(type, value) {
	switch (type) {
		case "get_from_editor":
			//alert("Value HTML string: " + value);

			// Do custom cleanup code here

			break;

		case "insert_to_editor":
			//alert("Value HTML string: " + value);

			// Do custom cleanup code here

			break;

		case "get_from_editor_dom":
			//alert("Value DOM Element " + value);

			// Do custom cleanup code here

			break;

		case "insert_to_editor_dom":
			//alert("Value DOM Element: " + value);

			// Do custom cleanup code here

			break;
	}
	return value;
    }
    function myOnKeyDown() {
      //alert("keydown");
    }
    function myprint(e) {

	  alert(e.type);
	  //tinyMCE.addEvent(document, "mouseup", mymouseup(e));
	
    }
	
	function fixSize(w, h){
	// when an image is resized within the tinyMCE editor, only allow one of three (small, medium, or large) predetermined sizes.
		inst = tinyMCE.selectedInstance;
		el = tinyMCE.activeEditor.selection.getNode();
		html = tinyMCE.activeEditor.selection.getContent();
		wh =  Math.min(el.width, el.height);
		imgsrc = html.replace(new RegExp('https?:\/\/.*?\/', ''), '/');
		// strip off any ? followed by numbers after file extension
		imgsrc = imgsrc.replace(new RegExp('[\?][0-9]+$', ''), '');
		
		if (wh <= 85)
		{	
			if (w <= h)
			{
				width = 60;
				height = 60 * h / w;
			}
			else
			{
				height = 60;
				width = 60 * w / h;		
			}
			imgsrc = imgsrc.replace(new RegExp('\/(.*?)_(tiny|small|medium|large)Ex\.([a-zA-Z0-9\-]+?)'), '/' + '$1' + '_smallEx.' + '$3');
		}
		else if (wh > 85 && wh <= 140)
		{
			if (w <= h)
			{
				width = 100;
				height = 100 * h / w;
			}
			else
			{
				height = 100;
				width = 100 * w / h;		
			}
			imgsrc = imgsrc.replace(new RegExp('\/(.*?)_(tiny|small|medium|large)Ex\.([a-zA-Z0-9\-]+?)'), '/' + '$1' + '_mediumEx.' + '$3');
		}
		else if (wh > 140)
		{
			if (w <= h)
			{
				width = 180;
				height = 180 * h / w;
			}
			else
			{
				height = 180;
				width = 180 * w / h;		
			}
			imgsrc = imgsrc.replace(new RegExp('\/(.*?)_(tiny|small|medium|large)Ex\.([a-zA-Z0-9\-]+?)'), '/' + '$1' + '_largeEx.' + '$3');	
		}
		
		imgsrc = imgsrc.replace(new RegExp('height="[0-9]+"'), 'height="' + height + '"');
		imgsrc = imgsrc.replace(new RegExp('width="[0-9]+"'), 'width="' + width + '"');
		console.log(imgsrc);
		tinyMCE.activeEditor.selection.setContent(imgsrc);
		tinyMCE.activeEditor.execCommand('mceRepaint');
		
		return true;
	}
	// called if user copies image location in the image and document manager, or copies YouTube thumbnail of a video
	function handlePaste(){
		html = tinyMCE.selectedInstance.getDoc().body.innerHTML;
		html = html.replace(new RegExp('https?://.*?(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png)[\?]?[0-9]*', 'i'), '<a href="' + '$1' + '.' + '$2' + '"><img src="' + '$1' + '_mediumEx.' + '$2' + '" /></a>')
		// youtube embed code
		html = html.replace(new RegExp('&lt;object width="([0-9]+)" height="([0-9]+)"&gt;.*?value="https?://www.youtube.com/v/([^&?]+).*?&lt;/object&gt;', 'i'), '<a href="http://www.youtube.com/v/' + '$3&w=$1&h=$2"><img src="http://i3.ytimg.com/vi/$3/default.jpg /></a>')
		// youtube iframe code
		html = html.replace(new RegExp('&lt;iframe width="([0-9]+)" height="([0-9]+)" src="https?://www.youtube.com/embed/([^"?]+).*?&gt;&lt;/iframe&gt;', 'i'), '<a href="http://www.youtube.com/v/' + '$3&w=$1&h=$2"><img src="http://i3.ytimg.com/vi/$3/default.jpg /></a>')
		
		//alert(html);
		
		tinyMCE.selectedInstance.getDoc().body.innerHTML = html;
		return true;

	}
	function processDragDrop(){
		html = tinyMCE.selectedInstance.getDoc().body.innerHTML;
		//alert('tinyInitInstanceCallback: ' + html);
		//console.debug('tinyInitInstanceCallback: ' + e.id + e.type + e.target.nodeName);
		//html = html.replace(new RegExp('_smallSq', 'gi'), '_mediumEx');
		//html = html.replace(new RegExp('_smallSq\.([a-zA-Z0-9\-]+)[\?]*[0-9]*', 'gi'), '_mediumEx'+ '$1');
		//html = html.replace(new RegExp('return false;" title="(.*?)">', 'gi'), 'return false;" title="Click to enlarge">');
		
		//html = html.replace(new RegExp('(<a href=".*</a>.*)?(<a href=".*?(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png).*?".*?</a>)', 'i'), '$1' + '<a href="' + '$3' + '.' + '$4' + '" onclick="' + 'return hs.expand(this)"><img src="' + '$3' + '_mediumEx.' + '$4' + '" title="Click to enlarge"></a>');
		//html = html.replace(new RegExp('<a href="\.*(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png).*?</a>', 'i'), '<a href="' + '$1' + '.' + '$2' + '"><img src="' + '$1' + '_mediumEx.' + '$2' + '" /></a>');
		//html = html.replace(new RegExp('<a href="[\./]*/rubycms.*?><img.*?src="[\./]*(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png).*?</a>', 'i'), '<a href="' + '$1' + '.' + '$2' + '"><img src="' + '$1' + '_mediumEx.' + '$2' + '" /></a>');
		html = html.replace(new RegExp('<a href=".*?/rubycms.*?><img.*?src=".*?(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png).*?</a>', 'i'), '<a href="' + '$1' + '.' + '$2' + '"><img src="' + '$1' + '_mediumEx.' + '$2' + '" /></a>');
		tinyMCE.selectedInstance.getDoc().body.innerHTML = html;
		return true;

	}
	
	function tinyInitInstanceCallback(ed) {
    if (tinymce.isIE) {
        tinymce.dom.Event.add(ed.getWin(), 'drop', function(e) {
			setTimeout("processDragDrop()",100);
            //console.debug('tinyInitInstanceCallback: ' + e.id + e.type + e.target.nodeName);
			//html = ed.getDoc().body.innerHTML;
			//html = html.replace(new RegExp('_smallSq', 'gi'), '_mediumEx');
			//html = html.replace(new RegExp('_smallSq\.([a-zA-Z0-9\-]+)[\?]*[0-9]*', 'gi'), '_mediumEx'+ '$1');
			//html = html.replace(new RegExp('return false;" title="(.*?)">', 'gi'), 'return false;" title="Click to enlarge">');
			//ed.getDoc().body.innerHTML = html;
			return true;	
        });
		tinymce.dom.Event.add(ed.getWin(), 'paste', function(e) {
			setTimeout("handlePaste()", 100);
			return true;
		});
        
    } else {
        tinymce.dom.Event.add(ed.getDoc(), 'drop', function(e) {
			setTimeout("processDragDrop()",100);
			//html = ed.getDoc().body.innerHTML;
		   // html = html.replace(new RegExp('(<a href=".*</a>.*)?(<a href=".*?(/system/images/.*?)_smallSq\.(jpe?g|JPE?G|Jpe?g|gif|GIF|Gif|png|PNG|Png).*?".*?</a>)', 'i'), '$1' + '*******' + '<a href="' + '$3' + '.' + '$4' + '"><img src="' + '$3' + '_mediumEx.' + '$4' + '"></a>' + '*******');
		    //ed.getDoc().body.innerHTML = html;
			return true;	
        });
		tinymce.dom.Event.add(ed.getDoc(), 'paste', function(e) {
			setTimeout("handlePaste()", 100);
			return true;
		});
 
    }
	tinymce.dom.Event.add(ed.getDoc(), 'paste', function(e) {
	//ed.onPaste.add(function(ed, e) {
		setTimeout("handlePaste()", 100);
		return true;
		
	});
	 
	
}
	  
    // tinyHandleEvent captures events and does post-processing after
    // tinyMCE handles drag/drop events.
	function tinyHandleEvent(e, ed, o)
	{
		if (e.type == "mouseup")
		{
			elm = tinyMCE.activeEditor.selection.getNode();
			console.log(elm.width + ' ^ ' + elm.height);
			wh = Math.min(elm.width, elm.height);
			w = elm.width;
			h = elm.height;	
	        if (elm.tagName == "IMG"
				&& (w != tinyHandleEvent.prevWidth || h != tinyHandleEvent.prevHeight)
				&& tinyHandleEvent.prevWidth != 0 && tinyHandleEvent.prevHeight != 0)
			{
				setTimeout("fixSize(tinyHandleEvent.prevWidth, tinyHandleEvent.prevHeight)",100);
	        }
		}
		if (e.type == "mousedown")
		{
			tinyHandleEvent.prevWidth = 0;
			tinyHandleEvent.prevHeight = 0;
			elm = tinyMCE.activeEditor.selection.getNode();
			console.log(elm);
			console.log(elm.width + ' x ' + elm.height);
	        if (elm.tagName == "IMG")
			{
				tinyHandleEvent.prevWidth = elm.width;
				tinyHandleEvent.prevHeight = elm.height;
			}
		}
		
	return true; // Continue handling
    }
    function tinyCustomExecCommandHandler (editor_id, elm, command, user_interface, value) {
      var linkElm, imageElm, inst, html;
      switch (command) {
      case "afterDragDrop":
			
			inst = tinyMCE.get(editor_id);  //inst = tinyMCE.getInstanceById(editor_id);
			imageElm = inst.dom.getParent(inst.selection.getNode(), "img");  //imageElm = tinyMCE.getParentElement(inst.selection.getFocusElement(), "img");
            html = inst.getDoc().body.innerHTML;
			html = html.replace(new RegExp('_smallSq', 'gi'), '_mediumEx');
			html = html.replace(new RegExp('_smallSq\.([a-zA-Z0-9\-]+)[\?]*[0-9]*', 'gi'), '_mediumEx'+ '$1');
			html = html.replace(new RegExp('return false;" title="(.*?)">', 'gi'), 'return false;" title="Click to enlarge">');
			
			
			
			tinyMCE.DOM.setInnerHTML(inst.getBody(), html);//tinyMCE.setInnerHTML(inst.getBody(), html);
			//alert(value + html);
			//if (imageElm)
			//	alert("mceReplace dialog has been overriden. Found image src: " + tinyMCE.getAttrib(imageElm, "src"));
			//else
			//	alert("mceReplace dialog has been overriden.");

			return true;			
	  }
      return false; // Pass to next handler in chain
    }
    //function tinyOnChangeHandler(inst) {
    //    html = inst.getBody().innerHTML;
    //    if (html_old == html_new) { return }
    //    PasteFixKnooppunt();
    //    return true; // Continue handling
    //
    //}

    </script>
	

